//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace mstartTask.Models
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
  

    public partial class User
    {
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        public User()
        {
            this.Accounts = new HashSet<Account>();
        }
       
        public int ID { get; set; }
        public Nullable<System.DateTime> Server_DateTime { get; set; }
        public Nullable<System.DateTime> DateTime_UTC { get; set; }
        public Nullable<System.DateTime> Update_DateTime_UTC { get; set; }
        [Required]
        [RegularExpression("^[a-zA-Z0-9]+$", ErrorMessage = "Only English letters and numbers are allowed.")]
        [UniqueUsername(ErrorMessage = "Username must be unique.")]
        public string Username { get; set; }
        [Required]
        [EmailAddress(ErrorMessage = "Invalid email format.")]
        [UniqueEmail(ErrorMessage = "Email must be unique.")]
        public string Email { get; set; }
        [Required]
        public string First_Name { get; set; }
        [Required]
        public string Last_Name { get; set; }
        [Required]
        public int Status { get; set; }
        [Required]
        public int Gender { get; set; }
        public System.DateTime Date_Of_Birth { get; set; }
    
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<Account> Accounts { get; set; }
    }
    public enum Gender
    {
        Female = 0,
        Male = 1
    }
    public enum Status
    {
        Accept = 0,
        pending = 1,
        Delete=2
    }


    public class UniqueUsernameAttribute : ValidationAttribute
    {
        protected override ValidationResult IsValid(object value, ValidationContext validationContext)
        {
            if (value != null)
            {
                string username = value.ToString();

                // Retrieve the User object from the validation context
                User user = (User)validationContext.ObjectInstance;

                // Check if there is another user with the same username
                using (MstartTaskEntities dbContext = new MstartTaskEntities()) // Replace with your actual DbContext
                {
                    if (dbContext.Users.Any(u => u.Username == username && u.ID != user.ID))
                    {
                        return new ValidationResult(ErrorMessage);
                    }
                }
            }

            return ValidationResult.Success;
        }
    }
    public class UniqueEmailAttribute : ValidationAttribute
    {
        protected override ValidationResult IsValid(object value, ValidationContext validationContext)
        {
            if (value != null)
            {
                string email = value.ToString();

                // Retrieve the User object from the validation context
                User user = (User)validationContext.ObjectInstance;

                // Check if there is another user with the same email
                using (MstartTaskEntities dbContext = new MstartTaskEntities()) // Replace with your actual DbContext
                {
                    if (dbContext.Users.Any(u => u.Email == email && u.ID != user.ID))
                    {
                        return new ValidationResult(ErrorMessage);
                    }
                }
            }

            return ValidationResult.Success;
        }
    }
}
