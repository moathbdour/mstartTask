//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace mstartTask.Models
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.Reflection;

    public partial class Account
    {
        public int ID { get; set; }
        public int UserID { get; set; }
        public Nullable<System.DateTime> Server_DateTime { get; set; }
        public Nullable<System.DateTime> DateTime_UTC { get; set; }
        public Nullable<System.DateTime> Update_DateTime_UTC { get; set; }
        [Required(ErrorMessage = "Account number is required.")]
        [RegularExpression("^[0-9]{7}$", ErrorMessage = "Account number must be 7 digits.")]
        [UniqueAccountNumber(ErrorMessage = "Account number must be unique.")]
        public string Account_Number { get; set; }
        [Required(ErrorMessage = "Balance is required.")]
        [RegularExpression(@"^\d+(\.\d{1,2})?$", ErrorMessage = "Balance must be a valid decimal value.")]
        public decimal Balance { get; set; }
        [Required(ErrorMessage = "Currency is required.")]

        public string Currency { get; set; }
        public struct CurrencyOptions
        {
            public const string USD = "USD";
            public const string EUR = "EUR";
            public const string GBP = "GBP";
            // Add more currency options as needed
        }
        public static List<string> CurrencyOptionsList => typeof(CurrencyOptions)
     .GetFields(BindingFlags.Public | BindingFlags.Static)
     .Select(f => f.GetValue(null).ToString())
     .ToList();
        public int Status { get; set; }
    
        public virtual User User { get; set; }
    }

    public class UniqueAccountNumberAttribute : ValidationAttribute
    {
        protected override ValidationResult IsValid(object value, ValidationContext validationContext)
        {
            if (value != null)
            {
                string accountNumber = value.ToString();

                // Retrieve the Account object from the validation context
                Account account = (Account)validationContext.ObjectInstance;

                // Check if there is another account with the same account number
                using (MstartTaskEntities dbContext = new MstartTaskEntities()) // Replace with your actual DbContext
                {
                    if (dbContext.Accounts.Any(a => a.Account_Number == accountNumber && a.ID != account.ID))
                    {
                        return new ValidationResult(ErrorMessage);
                    }
                }
            }

            return ValidationResult.Success;
        }
    }
}
